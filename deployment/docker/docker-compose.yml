version: '3.8'

services:
  # Main Maritime API Service
  maritimeiq-platform-api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sql-server;Database=MaritimeIQDB;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - Redis__ConnectionString=redis:6379
      - ApplicationInsights__ConnectionString=InstrumentationKey=your-dev-key
    depends_on:
      - sql-server
      - redis
      - maritime-intelligence
      - fleet-analytics
    networks:
      - maritimeiq-platform-network
    volumes:
      - ./logs:/app/logs

  # Maritime Intelligence Service
  maritime-intelligence:
    build:
      context: .
      dockerfile: Dockerfile.Intelligence
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FormRecognizer__Endpoint=https://your-form-recognizer.cognitiveservices.azure.com/
      - FormRecognizer__ApiKey=your-form-recognizer-key
      - TextAnalytics__Endpoint=https://your-text-analytics.cognitiveservices.azure.com/
      - TextAnalytics__ApiKey=your-text-analytics-key
      - ComputerVision__Endpoint=https://your-computer-vision.cognitiveservices.azure.com/
      - ComputerVision__ApiKey=your-computer-vision-key
      - AzureOpenAI__Endpoint=https://your-openai.openai.azure.com/
      - AzureOpenAI__ApiKey=your-openai-key
      - CognitiveSearch__Endpoint=https://your-search.search.windows.net
      - CognitiveSearch__ApiKey=your-search-key
    networks:
      - maritimeiq-platform-network
    volumes:
      - ./intelligence-logs:/app/logs

  # Fleet Analytics Service
  fleet-analytics:
    build:
      context: .
      dockerfile: Dockerfile.Analytics
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sql-server;Database=MaritimeIQDB;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - Redis__ConnectionString=redis:6379
      - PowerBI__WorkspaceId=your-powerbi-workspace-id
      - PowerBI__ClientId=your-powerbi-client-id
      - PowerBI__ClientSecret=your-powerbi-client-secret
    depends_on:
      - sql-server
      - redis
    networks:
      - maritimeiq-platform-network
    volumes:
      - ./analytics-logs:/app/logs

  # IoT Data Ingestion Service
  iot-ingestion:
    build:
      context: .
      dockerfile: Dockerfile.IoT
    ports:
      - "5003:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - EventHubs__ConnectionString=Endpoint=sb://your-eventhubs.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=your-key
      - ServiceBus__ConnectionString=Endpoint=sb://your-servicebus.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=your-key
      - CosmosDB__ConnectionString=AccountEndpoint=https://your-cosmos.documents.azure.com:443/;AccountKey=your-cosmos-key;
      - Storage__ConnectionString=DefaultEndpointsProtocol=https;AccountName=yourstorage;AccountKey=your-storage-key;EndpointSuffix=core.windows.net
    networks:
      - maritimeiq-platform-network
    volumes:
      - ./iot-logs:/app/logs

  # SQL Server Database
  sql-server:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sql-data:/var/opt/mssql
      - ./database-init:/docker-entrypoint-initdb.d
    networks:
      - maritimeiq-platform-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - maritimeiq-platform-network

  # Azure Functions Local Runtime (for development)
  azure-functions:
    image: mcr.microsoft.com/azure-functions/dotnet-isolated:4-dotnet-isolated8.0
    ports:
      - "7071:80"
    environment:
      - AzureWebJobsStorage=DefaultEndpointsProtocol=https;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - EventHubConnectionString=Endpoint=sb://your-eventhubs.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=your-key
      - ServiceBusConnectionString=Endpoint=sb://your-servicebus.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=your-key
    volumes:
      - ./Functions:/home/site/wwwroot
    depends_on:
      - azurite
    networks:
      - maritimeiq-platform-network

  # Azurite (Azure Storage Emulator)
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    ports:
      - "10000:10000"  # Blob service
      - "10001:10001"  # Queue service
      - "10002:10002"  # Table service
    volumes:
      - azurite-data:/data
    networks:
      - maritimeiq-platform-network

  # Elasticsearch (for local search development)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - maritimeiq-platform-network

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - maritimeiq-platform-api
      - maritime-intelligence
      - fleet-analytics
      - iot-ingestion
    networks:
      - maritimeiq-platform-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - maritimeiq-platform-network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - maritimeiq-platform-network

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger HTTP receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - maritimeiq-platform-network

volumes:
  sql-data:
  redis-data:
  azurite-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:

networks:
  maritimeiq-platform-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16