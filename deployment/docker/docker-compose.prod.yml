version: '3.8'

services:
  maritimeiq-platform-api:
    image: maritimeiqacr.azurecr.io/maritimeiq-platform-api:latest
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=${SQL_CONNECTION_STRING}
      - AzureStorage__ConnectionString=${STORAGE_CONNECTION_STRING}
      - ServiceBus__ConnectionString=${SERVICEBUS_CONNECTION_STRING}
      - EventHubs__ConnectionString=${EVENTHUBS_CONNECTION_STRING}
      - KeyVault__VaultUri=${KEYVAULT_URI}
      - ApplicationInsights__ConnectionString=${APPINSIGHTS_CONNECTION_STRING}
    depends_on:
      - redis
    networks:
      - maritimeiq-network

  maritimeiq-vessel-tracking:
    image: maritimeiqacr.azurecr.io/maritimeiq-vessel-tracking:latest
    build:
      context: ./VesselTracking
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - EventHubs__AisDataStream=${EVENTHUBS_AIS_CONNECTION}
      - ServiceBus__VesselDataQueue=${SERVICEBUS_VESSEL_QUEUE}
    networks:
      - maritimeiq-network

  maritimeiq-environmental-monitoring:
    image: maritimeiqacr.azurecr.io/maritimeiq-environmental-monitoring:latest
    build:
      context: ./EnvironmentalMonitoring
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - EventHubs__EnvironmentalSensors=${EVENTHUBS_ENV_CONNECTION}
      - ServiceBus__EnvironmentalQueue=${SERVICEBUS_ENV_QUEUE}
    networks:
      - maritimeiq-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - maritimeiq-network

networks:
  maritimeiq-network:
    driver: bridge