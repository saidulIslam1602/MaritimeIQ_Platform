name: Maritime Platform CI/CD

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

env:
  REGISTRY: maritimeregistry70396.azurecr.io
  IMAGE_NAME: maritimeiq-platform
  AZURE_RESOURCE_GROUP: maritime-platform-rg

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore Maritime_DataEngineering_Plaatform.sln

    - name: Build application
      run: dotnet build Maritime_DataEngineering_Plaatform.sln --no-restore --configuration Release

    - name: Run tests
      run: dotnet test Maritime_DataEngineering_Plaatform.sln --no-build --configuration Release --verbosity normal
      continue-on-error: true

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=v{{date 'YYYY.MM.DD'}}-{{sha}}

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  # Job 2: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-test.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Instances (Staging)
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
        dns-name-label: maritimeiq-staging-${{ github.run_number }}
        image: ${{ needs.build-and-test.outputs.image-tag }}
        registry-login-server: ${{ env.REGISTRY }}
        registry-username: ${{ secrets.ACR_USERNAME }}
        registry-password: ${{ secrets.ACR_PASSWORD }}
        name: maritimeiq-staging
        location: 'Norway East'
        cpu: 1
        memory: 1.5
        ports: '8080'
        environment-variables: |
          ASPNETCORE_ENVIRONMENT=Staging
          ASPNETCORE_URLS=http://+:8080

    - name: Health Check
      run: |
        echo "Waiting for container to start..."
        sleep 30
        HEALTH_URL="http://maritimeiq-staging-${{ github.run_number }}.norwayeast.azurecontainer.io:8080/health"
        curl -f $HEALTH_URL || exit 1

  # Job 4: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run API Integration Tests
      run: |
        BASE_URL="http://maritimeiq-staging-${{ github.run_number }}.norwayeast.azurecontainer.io:8080"
        
        # Test Fleet Management API
        echo "Testing Fleet Management API..."
        curl -f "$BASE_URL/api/vessels" | jq '.[] | select(.name == "MS Arctic Explorer")'
        
        # Test Route Planning API
        echo "Testing Route Planning API..."
        curl -f "$BASE_URL/api/routes" | jq '.[0].name'
        
        # Test Safety Systems API
        echo "Testing Safety Systems API..."
        curl -f "$BASE_URL/api/safety/fleet-status" | jq '.overallStatus'
        
        # Test IoT Integration API
        echo "Testing IoT Integration API..."
        curl -f "$BASE_URL/api/iot/vessels/1/sensors" | jq '.sensors | length'

  # Job 5: Deploy to Production (Manual Approval)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Instances (Production)
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
        dns-name-label: maritimeiq-prod
        image: ${{ needs.build-and-test.outputs.image-tag }}
        registry-login-server: ${{ env.REGISTRY }}
        registry-username: ${{ secrets.ACR_USERNAME }}
        registry-password: ${{ secrets.ACR_PASSWORD }}
        name: maritimeiq-production
        location: 'Norway East'
        cpu: 2
        memory: 3
        ports: '8080'
        environment-variables: |
          ASPNETCORE_ENVIRONMENT=Production
          ASPNETCORE_URLS=http://+:8080

    - name: Production Health Check
      run: |
        echo "Waiting for production container to start..."
        sleep 45
        HEALTH_URL="http://maritimeiq-prod.norwayeast.azurecontainer.io:8080/health"
        curl -f $HEALTH_URL || exit 1
        echo "âœ… Production deployment successful!"

    - name: Notify Teams
      run: |
        echo "ðŸš¢ MaritimeIQ Platform deployed successfully!"
        echo "Production URL: http://maritimeiq-prod.norwayeast.azurecontainer.io:8080"
        echo "Swagger API: http://maritimeiq-prod.norwayeast.azurecontainer.io:8080/swagger"