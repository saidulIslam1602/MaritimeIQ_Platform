name: Maritime Platform CI/CD

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: maritimeregistry70396.azurecr.io
  IMAGE_NAME: maritimeiq-platform
  AZURE_RESOURCE_GROUP: maritime-platform-rg

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: |
        ls -la *.sln || true
        dotnet restore ./Maritime_DataEngineering_Plaatform.sln
      working-directory: ${{ github.workspace }}

    - name: Build application
      run: dotnet build ./Maritime_DataEngineering_Plaatform.sln --no-restore --configuration Release
      working-directory: ${{ github.workspace }}

    - name: Run tests
      continue-on-error: true
      run: dotnet test ./Maritime_DataEngineering_Plaatform.sln --no-build --configuration Release --verbosity normal
      working-directory: ${{ github.workspace }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Set image tag output
      id: set-tag
      run: echo "image-tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

  # Job 2: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Install Trivy
      run: |
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    - name: Run Trivy vulnerability scanner
      continue-on-error: true
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ needs.build-and-test.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        trivy image \
          --severity CRITICAL,HIGH,MEDIUM \
          --format table \
          --scanners vuln,secret,config \
          ${{ needs.build-and-test.outputs.image-tag }} >> $GITHUB_STEP_SUMMARY || echo "Scan completed with warnings" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  # Job 3: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    outputs:
      staging-url: ${{ steps.get-url.outputs.app-url }}
    
    steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Apps (Staging)
      run: |
        echo "🚀 Deploying to staging environment..."
        
        # Update the container app with new image
        az containerapp update \
          --name maritime-api-container \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ needs.build-and-test.outputs.image-tag }} \
          --set-env-vars \
            ASPNETCORE_ENVIRONMENT=Staging \
            ASPNETCORE_URLS=http://+:8080
        
        echo "✅ Staging deployment complete!"

    - name: Get staging URL
      id: get-url
      run: |
        FQDN=$(az containerapp show \
          --name maritime-api-container \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        echo "app-url=https://$FQDN" >> $GITHUB_OUTPUT
        
        echo "## 🚀 Staging Deployment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ✅ Deployed" >> $GITHUB_STEP_SUMMARY
        echo "**URL:** https://$FQDN" >> $GITHUB_STEP_SUMMARY
        echo "**Swagger:** https://$FQDN/swagger" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ needs.build-and-test.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY

    - name: Health check
      continue-on-error: true
      run: |
        FQDN=$(az containerapp show \
          --name maritime-api-container \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        echo "⏳ Waiting for application to start..."
        sleep 30
        
        for i in {1..10}; do
          if curl -f -k "https://$FQDN/health" 2>/dev/null; then
            echo "✅ Health check passed!" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          echo "Attempt $i/10..."
          sleep 10
        done
        
        echo "⚠️ Health check timeout (app may still be starting)" >> $GITHUB_STEP_SUMMARY

  # Job 4: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Run integration tests
      continue-on-error: true
      run: |
        FQDN=$(az containerapp show \
          --name maritime-api-container \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        BASE_URL="https://$FQDN"
        
        echo "## 🧪 Integration Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test API Root
        echo "### API Endpoints" >> $GITHUB_STEP_SUMMARY
        if curl -f -k "$BASE_URL/" 2>/dev/null; then
          echo "- ✅ API Root accessible" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ API Root not accessible" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Test Health
        if curl -f -k "$BASE_URL/health" 2>/dev/null; then
          echo "- ✅ Health endpoint responding" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ Health endpoint not responding" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Test Swagger
        if curl -f -k "$BASE_URL/swagger" 2>/dev/null; then
          echo "- ✅ Swagger UI accessible" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ Swagger UI not accessible" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Test API Status
        if curl -f -k "$BASE_URL/api/status" 2>/dev/null; then
          echo "- ✅ Status API responding" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ Status API not accessible" >> $GITHUB_STEP_SUMMARY
        fi

  # Job 5: Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Production
      run: |
        echo "🚀 Deploying to PRODUCTION environment..."
        
        # Deploy the same tested image to production
        az containerapp update \
          --name maritime-api-container \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ needs.build-and-test.outputs.image-tag }} \
          --set-env-vars \
            ASPNETCORE_ENVIRONMENT=Production \
            ASPNETCORE_URLS=http://+:8080
        
        echo "✅ Production deployment complete!"

    - name: Get production URL and notify
      run: |
        FQDN=$(az containerapp show \
          --name maritime-api-container \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        echo "# 🎉 Production Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ needs.build-and-test.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Access Links" >> $GITHUB_STEP_SUMMARY
        echo "- **Application:** https://$FQDN" >> $GITHUB_STEP_SUMMARY
        echo "- **Swagger API:** https://$FQDN/swagger" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check:** https://$FQDN/health" >> $GITHUB_STEP_SUMMARY
        echo "- **API Status:** https://$FQDN/api/status" >> $GITHUB_STEP_SUMMARY

    - name: Production health check
      continue-on-error: true
      run: |
        FQDN=$(az containerapp show \
          --name maritime-api-container \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        echo "⏳ Validating production deployment..."
        sleep 45
        
        for i in {1..10}; do
          if curl -f -k "https://$FQDN/health" 2>/dev/null; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ✅ Production Health Check: PASSED" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          echo "Validation attempt $i/10..."
          sleep 10
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ⚠️ Production Health Check: Timeout" >> $GITHUB_STEP_SUMMARY
        echo "(Application may still be initializing)" >> $GITHUB_STEP_SUMMARY
