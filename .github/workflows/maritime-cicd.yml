name: Maritime Platform CI/CD

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: maritimeregistry70396.azurecr.io
  IMAGE_NAME: maritimeiq-platform
  AZURE_RESOURCE_GROUP: maritime-platform-rg

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore Maritime_DataEngineering_Plaatform.sln

    - name: Build application
      run: dotnet build Maritime_DataEngineering_Plaatform.sln --no-restore --configuration Release

    - name: Run tests
      continue-on-error: true
      run: dotnet test Maritime_DataEngineering_Plaatform.sln --no-build --configuration Release --verbosity normal

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Run Trivy security scan
      continue-on-error: true
      run: |
        # Install Trivy
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update && sudo apt-get install -y trivy
        
        # Run security scan and display results
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        trivy image --severity CRITICAL,HIGH \
          --format table \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest >> $GITHUB_STEP_SUMMARY || echo "Security scan completed with warnings" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Azure Login
      if: github.ref == 'refs/heads/main'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Apps
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to Azure Container Apps..."
        
        az containerapp update \
          --name maritime-api-container \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          --set-env-vars \
            ASPNETCORE_ENVIRONMENT=Production \
            ASPNETCORE_URLS=http://+:8080
        
        echo "✅ Deployment complete!"

    - name: Get deployment URL
      if: github.ref == 'refs/heads/main'
      run: |
        FQDN=$(az containerapp show \
          --name maritime-api-container \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        echo "## 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Application URL:** https://$FQDN" >> $GITHUB_STEP_SUMMARY
        echo "**Swagger API:** https://$FQDN/swagger" >> $GITHUB_STEP_SUMMARY
        echo "**Health Check:** https://$FQDN/health" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

    - name: Health check
      if: github.ref == 'refs/heads/main'
      continue-on-error: true
      run: |
        FQDN=$(az containerapp show \
          --name maritime-api-container \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        echo "Waiting for application to start..."
        sleep 30
        
        for i in {1..10}; do
          if curl -f -k "https://$FQDN/health" 2>/dev/null; then
            echo "✅ Health check passed!"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Health check: PASSED" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          echo "Health check attempt $i/10 failed, retrying..."
          sleep 10
        done
        
        echo "⚠️ Health check did not pass, but deployment completed" >> $GITHUB_STEP_SUMMARY

    - name: Run integration tests
      if: github.ref == 'refs/heads/main'
      continue-on-error: true
      run: |
        FQDN=$(az containerapp show \
          --name maritime-api-container \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        echo "## 🧪 Integration Tests" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test API Root
        if curl -f -k "https://$FQDN/" 2>/dev/null; then
          echo "✅ API Root accessible" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ API Root check failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Test Swagger
        if curl -f -k "https://$FQDN/swagger" 2>/dev/null; then
          echo "✅ Swagger UI accessible" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Swagger UI check failed" >> $GITHUB_STEP_SUMMARY
        fi
