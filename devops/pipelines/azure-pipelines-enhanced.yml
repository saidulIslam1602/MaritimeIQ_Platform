# Enhanced CI/CD Pipeline for Havila Kystruten Maritime Platform
# Multi-stage deployment with security scanning, container scanning, and automated rollback

name: Havila Maritime Platform CI/CD

trigger:
  branches:
    include:
      - main
      - develop
      - release/*
  paths:
    include:
      - '**/*.cs'
      - '**/*.csproj'
      - '**/*.json'
      - '**/Dockerfile*'
      - '**/*.yml'
      - '**/*.yaml'

variables:
  # Azure Configuration
  azureSubscription: 'Havila-Maritime-Subscription'
  resourceGroupName: 'havila-maritime-rg'
  containerRegistry: 'havilamaritimeacr.azurecr.io'
  containerAppsEnvironment: 'havila-maritime-env'
  
  # Application Configuration
  buildConfiguration: 'Release'
  dotNetVersion: '8.x'
  
  # Container Images
  apiImageName: 'havila-maritime-api'
  intelligenceImageName: 'havila-maritime-intelligence'
  analyticsImageName: 'havila-fleet-analytics'
  iotImageName: 'havila-iot-ingestion'
  functionsImageName: 'havila-maritime-functions'
  
  # Security and Quality
  sonarCloudProjectKey: 'havila-maritime-platform'
  snykOrganization: 'havila-kystruten'
  
  # Deployment Targets
  developmentEnvironment: 'havila-maritime-dev-env'
  stagingEnvironment: 'havila-maritime-staging-env'
  productionEnvironment: 'havila-maritime-prod-env'

pool:
  vmImage: 'ubuntu-latest'

stages:
  # Stage 1: Build and Test
  - stage: BuildAndTest
    displayName: 'Build and Test'
    jobs:
      - job: BuildJob
        displayName: 'Build Application'
        steps:
          - checkout: self
            fetchDepth: 0
          
          - task: UseDotNet@2
            displayName: 'Setup .NET'
            inputs:
              packageType: 'sdk'
              version: $(dotNetVersion)
          
          - task: DotNetCoreCLI@2
            displayName: 'Restore NuGet Packages'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
              feedsToUse: 'select'
          
          - task: SonarCloudPrepare@1
            displayName: 'Prepare SonarCloud Analysis'
            inputs:
              SonarCloud: 'SonarCloud-Havila'
              organization: 'havila-kystruten'
              scannerMode: 'MSBuild'
              projectKey: $(sonarCloudProjectKey)
              projectName: 'Havila Maritime Platform'
              extraProperties: |
                sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/coverage/*.xml
                sonar.coverage.exclusions=**/*.js,**/*.css,**/*.html
          
          - task: DotNetCoreCLI@2
            displayName: 'Build Solution'
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration) --no-restore'
          
          - task: DotNetCoreCLI@2
            displayName: 'Run Unit Tests'
            inputs:
              command: 'test'
              projects: '**/*Tests.csproj'
              arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --results-directory $(Agent.TempDirectory)/coverage'
              publishTestResults: true
          
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Agent.TempDirectory)/coverage/**/coverage.cobertura.xml'
          
          - task: SonarCloudAnalyze@1
            displayName: 'Run SonarCloud Analysis'
          
          - task: SonarCloudPublish@1
            displayName: 'Publish SonarCloud Results'
            inputs:
              pollingTimeoutSec: '300'
          
          - task: DotNetCoreCLI@2
            displayName: 'Publish Main API'
            inputs:
              command: 'publish'
              projects: 'AcrTasksDemo.csproj'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/api'
              publishWebProjects: false
          
          - task: DotNetCoreCLI@2
            displayName: 'Publish Functions'
            inputs:
              command: 'publish'
              projects: 'Functions/HavilaKystruten.Maritime.Functions.csproj'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/functions'
              publishWebProjects: false
          
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Build Artifacts'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'drop'

  # Stage 2: Security Scanning
  - stage: SecurityScanning
    displayName: 'Security Scanning'
    dependsOn: BuildAndTest
    jobs:
      - job: SecurityScanJob
        displayName: 'Security Analysis'
        steps:
          - checkout: self
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'drop'
              targetPath: '$(Pipeline.Workspace)/drop'
          
          # Snyk Security Scanning
          - task: SnykSecurityScan@1
            displayName: 'Snyk Code Security Scan'
            inputs:
              serviceConnectionEndpoint: 'Snyk-Havila'
              testType: 'code'
              severityThreshold: 'high'
              monitorWhen: 'always'
              failOnIssues: false
              projectName: 'Havila Maritime Platform'
              organization: $(snykOrganization)
          
          - task: SnykSecurityScan@1
            displayName: 'Snyk Dependency Scan'
            inputs:
              serviceConnectionEndpoint: 'Snyk-Havila'
              testType: 'app'
              severityThreshold: 'high'
              monitorWhen: 'always'
              failOnIssues: false
              projectName: 'Havila Maritime Platform'
              organization: $(snykOrganization)
          
          # OWASP Dependency Check
          - task: dependency-check-build-task@6
            displayName: 'OWASP Dependency Check'
            inputs:
              projectName: 'Havila Maritime Platform'
              scanPath: '$(Pipeline.Workspace)/drop'
              format: 'ALL'
              additionalArguments: '--enableRetired --enableExperimental'
          
          - task: PublishTestResults@2
            displayName: 'Publish Security Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(Agent.WorkFolder)/**/*-junit.xml'
              mergeTestResults: true
              testRunTitle: 'Security Scan Results'
            condition: always()

  # Stage 3: Container Build and Scan
  - stage: ContainerBuildScan
    displayName: 'Container Build and Security Scan'
    dependsOn: SecurityScanning
    jobs:
      - job: ContainerBuildJob
        displayName: 'Build and Scan Containers'
        steps:
          - checkout: self
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'drop'
              targetPath: '$(Pipeline.Workspace)/drop'
          
          - task: Docker@2
            displayName: 'Login to ACR'
            inputs:
              containerRegistry: 'Havila-Maritime-ACR'
              command: 'login'
          
          # Build Main API Container
          - task: Docker@2
            displayName: 'Build Main API Container'
            inputs:
              containerRegistry: 'Havila-Maritime-ACR'
              repository: $(apiImageName)
              command: 'build'
              Dockerfile: 'Dockerfile'
              tags: |
                $(Build.BuildId)
                latest
              arguments: '--build-arg BUILD_CONFIGURATION=$(buildConfiguration)'
          
          # Build Intelligence Service Container
          - task: Docker@2
            displayName: 'Build Intelligence Service Container'
            inputs:
              containerRegistry: 'Havila-Maritime-ACR'
              repository: $(intelligenceImageName)
              command: 'build'
              Dockerfile: 'Dockerfile.Intelligence'
              tags: |
                $(Build.BuildId)
                latest
          
          # Build Analytics Service Container
          - task: Docker@2
            displayName: 'Build Analytics Service Container'
            inputs:
              containerRegistry: 'Havila-Maritime-ACR'
              repository: $(analyticsImageName)
              command: 'build'
              Dockerfile: 'Dockerfile.Analytics'
              tags: |
                $(Build.BuildId)
                latest
          
          # Build IoT Ingestion Service Container
          - task: Docker@2
            displayName: 'Build IoT Ingestion Container'
            inputs:
              containerRegistry: 'Havila-Maritime-ACR'
              repository: $(iotImageName)
              command: 'build'
              Dockerfile: 'Dockerfile.IoT'
              tags: |
                $(Build.BuildId)
                latest
          
          # Container Security Scanning with Trivy
          - task: trivy@1
            displayName: 'Trivy Container Scan - Main API'
            inputs:
              version: 'latest'
              image: '$(containerRegistry)/$(apiImageName):$(Build.BuildId)'
              severities: 'HIGH,CRITICAL'
              exitCode: '0'
          
          - task: trivy@1
            displayName: 'Trivy Container Scan - Intelligence Service'
            inputs:
              version: 'latest'
              image: '$(containerRegistry)/$(intelligenceImageName):$(Build.BuildId)'
              severities: 'HIGH,CRITICAL'
              exitCode: '0'
          
          # Container Scanning with Snyk
          - task: SnykSecurityScan@1
            displayName: 'Snyk Container Scan - Main API'
            inputs:
              serviceConnectionEndpoint: 'Snyk-Havila'
              testType: 'container'
              dockerImageName: '$(containerRegistry)/$(apiImageName):$(Build.BuildId)'
              severityThreshold: 'high'
              monitorWhen: 'always'
              failOnIssues: false
          
          # Push containers only if scans pass
          - task: Docker@2
            displayName: 'Push Main API Container'
            inputs:
              containerRegistry: 'Havila-Maritime-ACR'
              repository: $(apiImageName)
              command: 'push'
              tags: |
                $(Build.BuildId)
                latest
          
          - task: Docker@2
            displayName: 'Push Intelligence Service Container'
            inputs:
              containerRegistry: 'Havila-Maritime-ACR'
              repository: $(intelligenceImageName)
              command: 'push'
              tags: |
                $(Build.BuildId)
                latest
          
          - task: Docker@2
            displayName: 'Push Analytics Service Container'
            inputs:
              containerRegistry: 'Havila-Maritime-ACR'
              repository: $(analyticsImageName)
              command: 'push'
              tags: |
                $(Build.BuildId)
                latest
          
          - task: Docker@2
            displayName: 'Push IoT Ingestion Container'
            inputs:
              containerRegistry: 'Havila-Maritime-ACR'
              repository: $(iotImageName)
              command: 'push'
              tags: |
                $(Build.BuildId)
                latest

  # Stage 4: Deploy to Development
  - stage: DeployDevelopment
    displayName: 'Deploy to Development'
    dependsOn: ContainerBuildScan
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: DeployToDev
        displayName: 'Deploy to Development Environment'
        environment: 'Development'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: 'Deploy Container Apps to Development'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Update Main API
                      az containerapp update \
                        --name havila-maritime-api-dev \
                        --resource-group $(resourceGroupName)-dev \
                        --image $(containerRegistry)/$(apiImageName):$(Build.BuildId)
                      
                      # Update Intelligence Service
                      az containerapp update \
                        --name havila-maritime-intelligence-dev \
                        --resource-group $(resourceGroupName)-dev \
                        --image $(containerRegistry)/$(intelligenceImageName):$(Build.BuildId)
                      
                      # Update Analytics Service
                      az containerapp update \
                        --name havila-fleet-analytics-dev \
                        --resource-group $(resourceGroupName)-dev \
                        --image $(containerRegistry)/$(analyticsImageName):$(Build.BuildId)
                      
                      # Update IoT Ingestion Service
                      az containerapp update \
                        --name havila-iot-ingestion-dev \
                        --resource-group $(resourceGroupName)-dev \
                        --image $(containerRegistry)/$(iotImageName):$(Build.BuildId)

  # Stage 5: Deploy to Staging
  - stage: DeployStaging
    displayName: 'Deploy to Staging'
    dependsOn: ContainerBuildScan
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - deployment: DeployToStaging
        displayName: 'Deploy to Staging Environment'
        environment: 'Staging'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: 'Deploy Container Apps to Staging'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Store current versions for rollback
                      CURRENT_API_VERSION=$(az containerapp show --name havila-maritime-api-staging --resource-group $(resourceGroupName)-staging --query "properties.template.containers[0].image" -o tsv)
                      CURRENT_INTELLIGENCE_VERSION=$(az containerapp show --name havila-maritime-intelligence-staging --resource-group $(resourceGroupName)-staging --query "properties.template.containers[0].image" -o tsv)
                      
                      echo "##vso[task.setvariable variable=CurrentApiVersion]$CURRENT_API_VERSION"
                      echo "##vso[task.setvariable variable=CurrentIntelligenceVersion]$CURRENT_INTELLIGENCE_VERSION"
                      
                      # Deploy new versions
                      az containerapp update \
                        --name havila-maritime-api-staging \
                        --resource-group $(resourceGroupName)-staging \
                        --image $(containerRegistry)/$(apiImageName):$(Build.BuildId)
                      
                      az containerapp update \
                        --name havila-maritime-intelligence-staging \
                        --resource-group $(resourceGroupName)-staging \
                        --image $(containerRegistry)/$(intelligenceImageName):$(Build.BuildId)
                      
                      az containerapp update \
                        --name havila-fleet-analytics-staging \
                        --resource-group $(resourceGroupName)-staging \
                        --image $(containerRegistry)/$(analyticsImageName):$(Build.BuildId)
                      
                      az containerapp update \
                        --name havila-iot-ingestion-staging \
                        --resource-group $(resourceGroupName)-staging \
                        --image $(containerRegistry)/$(iotImageName):$(Build.BuildId)
                
                # Health Check and Smoke Tests
                - task: PowerShell@2
                  displayName: 'Run Staging Health Checks'
                  inputs:
                    targetType: 'inline'
                    script: |
                      $stagingUrl = "https://havila-maritime-api-staging.norwayeast.azurecontainerapps.io"
                      
                      # Wait for deployment to be ready
                      Start-Sleep -Seconds 60
                      
                      # Health check
                      try {
                        $healthResponse = Invoke-RestMethod -Uri "$stagingUrl/health" -Method Get -TimeoutSec 30
                        Write-Host "Health check passed: $healthResponse"
                      } catch {
                        Write-Error "Health check failed: $_"
                        exit 1
                      }
                      
                      # Basic functionality test
                      try {
                        $apiResponse = Invoke-RestMethod -Uri "$stagingUrl/api/vessel" -Method Get -TimeoutSec 30
                        Write-Host "API test passed"
                      } catch {
                        Write-Error "API test failed: $_"
                        exit 1
                      }
                      
                      Write-Host "All staging health checks passed!"

  # Stage 6: Integration and E2E Testing
  - stage: IntegrationTesting
    displayName: 'Integration and E2E Testing'
    dependsOn: DeployStaging
    jobs:
      - job: IntegrationTests
        displayName: 'Run Integration Tests'
        steps:
          - checkout: self
          
          - task: UseDotNet@2
            displayName: 'Setup .NET'
            inputs:
              packageType: 'sdk'
              version: $(dotNetVersion)
          
          - task: DotNetCoreCLI@2
            displayName: 'Run Integration Tests'
            inputs:
              command: 'test'
              projects: '**/*IntegrationTests.csproj'
              arguments: '--configuration $(buildConfiguration) --logger trx --collect:"XPlat Code Coverage"'
              publishTestResults: true
            env:
              STAGING_API_URL: 'https://havila-maritime-api-staging.norwayeast.azurecontainerapps.io'
          
          # Performance Testing with NBomber
          - task: DotNetCoreCLI@2
            displayName: 'Run Performance Tests'
            inputs:
              command: 'test'
              projects: '**/*PerformanceTests.csproj'
              arguments: '--configuration $(buildConfiguration) --logger trx'
              publishTestResults: true
            env:
              STAGING_API_URL: 'https://havila-maritime-api-staging.norwayeast.azurecontainerapps.io'

  # Stage 7: Deploy to Production
  - stage: DeployProduction
    displayName: 'Deploy to Production'
    dependsOn: IntegrationTesting
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToProduction
        displayName: 'Deploy to Production Environment'
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: 'Backup Current Production Versions'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Store current production versions for rollback
                      CURRENT_API_VERSION=$(az containerapp show --name havila-maritime-api --resource-group $(resourceGroupName) --query "properties.template.containers[0].image" -o tsv)
                      CURRENT_INTELLIGENCE_VERSION=$(az containerapp show --name havila-maritime-intelligence --resource-group $(resourceGroupName) --query "properties.template.containers[0].image" -o tsv)
                      CURRENT_ANALYTICS_VERSION=$(az containerapp show --name havila-fleet-analytics --resource-group $(resourceGroupName) --query "properties.template.containers[0].image" -o tsv)
                      CURRENT_IOT_VERSION=$(az containerapp show --name havila-iot-ingestion --resource-group $(resourceGroupName) --query "properties.template.containers[0].image" -o tsv)
                      
                      echo "##vso[task.setvariable variable=ProdApiVersion]$CURRENT_API_VERSION"
                      echo "##vso[task.setvariable variable=ProdIntelligenceVersion]$CURRENT_INTELLIGENCE_VERSION"
                      echo "##vso[task.setvariable variable=ProdAnalyticsVersion]$CURRENT_ANALYTICS_VERSION"
                      echo "##vso[task.setvariable variable=ProdIotVersion]$CURRENT_IOT_VERSION"
                      
                      echo "Backup versions stored for rollback capability"
                
                # Blue-Green Deployment Strategy
                - task: AzureCLI@2
                  displayName: 'Deploy to Production (Blue-Green)'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "Starting Blue-Green deployment to production..."
                      
                      # Deploy new versions with gradual traffic shifting
                      az containerapp update \
                        --name havila-maritime-api \
                        --resource-group $(resourceGroupName) \
                        --image $(containerRegistry)/$(apiImageName):$(Build.BuildId) \
                        --traffic-weight latest=20,previous=80
                      
                      echo "Deployed with 20% traffic to new version"
                      
                      # Wait and monitor
                      sleep 300  # 5 minutes
                      
                      # If successful, shift more traffic
                      az containerapp update \
                        --name havila-maritime-api \
                        --resource-group $(resourceGroupName) \
                        --traffic-weight latest=50,previous=50
                      
                      echo "Shifted to 50% traffic split"
                      
                      # Wait and monitor again
                      sleep 300  # 5 minutes
                      
                      # Final cutover
                      az containerapp update \
                        --name havila-maritime-api \
                        --resource-group $(resourceGroupName) \
                        --traffic-weight latest=100
                      
                      # Update other services
                      az containerapp update \
                        --name havila-maritime-intelligence \
                        --resource-group $(resourceGroupName) \
                        --image $(containerRegistry)/$(intelligenceImageName):$(Build.BuildId)
                      
                      az containerapp update \
                        --name havila-fleet-analytics \
                        --resource-group $(resourceGroupName) \
                        --image $(containerRegistry)/$(analyticsImageName):$(Build.BuildId)
                      
                      az containerapp update \
                        --name havila-iot-ingestion \
                        --resource-group $(resourceGroupName) \
                        --image $(containerRegistry)/$(iotImageName):$(Build.BuildId)
                      
                      echo "Production deployment completed successfully!"
                
                # Production Health Monitoring
                - task: PowerShell@2
                  displayName: 'Production Health Monitoring'
                  inputs:
                    targetType: 'inline'
                    script: |
                      $productionUrl = "https://api.havila-maritime.com"
                      $maxRetries = 10
                      $retryCount = 0
                      
                      do {
                        try {
                          $healthResponse = Invoke-RestMethod -Uri "$productionUrl/health" -Method Get -TimeoutSec 30
                          Write-Host "Production health check passed: $healthResponse"
                          break
                        } catch {
                          $retryCount++
                          Write-Warning "Health check attempt $retryCount failed: $_"
                          Start-Sleep -Seconds 30
                        }
                      } while ($retryCount -lt $maxRetries)
                      
                      if ($retryCount -eq $maxRetries) {
                        Write-Error "Production health checks failed after $maxRetries attempts"
                        exit 1
                      }
                      
                      Write-Host "Production deployment health checks completed successfully!"

  # Stage 8: Post-Deployment Monitoring
  - stage: PostDeploymentMonitoring
    displayName: 'Post-Deployment Monitoring'
    dependsOn: DeployProduction
    jobs:
      - job: MonitoringJob
        displayName: 'Setup Production Monitoring'
        steps:
          - task: AzureCLI@2
            displayName: 'Configure Application Insights Alerts'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Configuring post-deployment monitoring and alerts..."
                
                # Create Application Insights availability tests
                az rest --method POST \
                  --url "https://management.azure.com/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$(resourceGroupName)/providers/Microsoft.Insights/webtests/Havila-API-Availability-Test?api-version=2015-05-01" \
                  --body '{
                    "location": "North Europe",
                    "tags": {
                      "hidden-link:/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$(resourceGroupName)/providers/Microsoft.Insights/components/havila-maritime-appinsights": "Resource"
                    },
                    "properties": {
                      "SyntheticMonitorId": "Havila-API-Availability-Test",
                      "Name": "Havila Maritime API Availability Test",
                      "Enabled": true,
                      "Frequency": 300,
                      "Timeout": 30,
                      "Kind": "ping",
                      "RetryEnabled": true,
                      "Locations": [
                        {"Id": "emea-nl-ams-azr"},
                        {"Id": "emea-gb-db3-azr"},
                        {"Id": "emea-se-sto-edge"}
                      ],
                      "Configuration": {
                        "WebTest": "<WebTest><Items><Request Method=\"GET\" Url=\"https://api.havila-maritime.com/health\" /></Items></WebTest>"
                      }
                    }
                  }'
                
                echo "Production monitoring configured successfully!"

# Rollback Pipeline (Separate pipeline triggered manually)
---
# Rollback Pipeline
name: Havila Maritime Platform Rollback

trigger: none

parameters:
  - name: rollbackStage
    displayName: 'Rollback Stage'
    type: string
    default: 'production'
    values:
      - 'staging'
      - 'production'
  
  - name: rollbackReason
    displayName: 'Rollback Reason'
    type: string
    default: 'Performance degradation'

variables:
  azureSubscription: 'Havila-Maritime-Subscription'
  resourceGroupName: 'havila-maritime-rg'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: RollbackExecution
    displayName: 'Execute Rollback'
    jobs:
      - deployment: RollbackDeployment
        displayName: 'Rollback to Previous Version'
        environment: '${{ parameters.rollbackStage }}'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: 'Rollback Container Apps'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      ENVIRONMENT_SUFFIX=""
                      if [ "${{ parameters.rollbackStage }}" != "production" ]; then
                        ENVIRONMENT_SUFFIX="-${{ parameters.rollbackStage }}"
                      fi
                      
                      echo "Initiating rollback for ${{ parameters.rollbackStage }} environment"
                      echo "Reason: ${{ parameters.rollbackReason }}"
                      
                      # Get previous revision for each service
                      API_REVISIONS=$(az containerapp revision list --name havila-maritime-api${ENVIRONMENT_SUFFIX} --resource-group $(resourceGroupName)${ENVIRONMENT_SUFFIX} --query "[?properties.active].{name:name,createdTime:properties.createdTime}" -o json)
                      PREVIOUS_API_REVISION=$(echo $API_REVISIONS | jq -r 'sort_by(.createdTime) | reverse | .[1].name')
                      
                      # Activate previous revision
                      az containerapp revision activate \
                        --name havila-maritime-api${ENVIRONMENT_SUFFIX} \
                        --resource-group $(resourceGroupName)${ENVIRONMENT_SUFFIX} \
                        --revision $PREVIOUS_API_REVISION
                      
                      # Set traffic to previous revision
                      az containerapp update \
                        --name havila-maritime-api${ENVIRONMENT_SUFFIX} \
                        --resource-group $(resourceGroupName)${ENVIRONMENT_SUFFIX} \
                        --traffic-weight $PREVIOUS_API_REVISION=100
                      
                      echo "Rollback completed successfully!"
                
                - task: PowerShell@2
                  displayName: 'Verify Rollback Success'
                  inputs:
                    targetType: 'inline'
                    script: |
                      $baseUrl = if ("${{ parameters.rollbackStage }}" -eq "production") { 
                        "https://api.havila-maritime.com" 
                      } else { 
                        "https://havila-maritime-api-${{ parameters.rollbackStage }}.norwayeast.azurecontainerapps.io" 
                      }
                      
                      # Verify rollback
                      try {
                        $healthResponse = Invoke-RestMethod -Uri "$baseUrl/health" -Method Get -TimeoutSec 30
                        Write-Host "Rollback verification successful: $healthResponse"
                      } catch {
                        Write-Error "Rollback verification failed: $_"
                        exit 1
                      }
                      
                      Write-Host "Rollback to ${{ parameters.rollbackStage }} completed and verified successfully!"